import os
GEN_RANDOM_NETWORKS = '../../src/gen_random_networks.py'
networks_dir_template = '{}/{}-networks'
A_networks_dir = networks_dir_template.format(config['output_dir'], config['A_species'])
B_networks_dir = networks_dir_template.format(config['output_dir'], config['B_species'])

network_list_template = '{}/{}-networks.tsv'
A_network_list = network_list_template.format(A_networks_dir, config['A_species'])
B_network_list = network_list_template.format(B_networks_dir, config['B_species'])

rule all:
    input:
        A_network_list, B_network_list

rule A_random_networks:
    input:
        config['A_edgelist']
    output:
        A_network_list
    params:
        A_species = config['A_species'],
        n_graphs = config['n_graphs'],
        n_jobs = config['n_jobs']
    shell:
        '''
        time \
        python {GEN_RANDOM_NETWORKS} \
            -s {params.A_species} \
            -e {input} \
            -n {params.n_graphs} \
            -d {A_networks_dir} \
            -j {params.n_jobs} \
        '''

rule B_random_networks:
    input:
        config['B_edgelist']
    output:
        B_network_list
    params:
        B_species = config['B_species'],
        n_graphs = config['n_graphs'],
        n_jobs = config['n_jobs']
    shell:
        '''
        time \
        python {GEN_RANDOM_NETWORKS} \
            -s {params.B_species} \
            -e {input} \
            -n {params.n_graphs} \
            -d {B_networks_dir} \
            -j {params.n_jobs} \
        '''
