import os
GEN_RANDOM_NETWORK = '../../src/gen_random_network.py'
PERMTEST = '../../src/permtest.py'
SPECIES_A, SPECIES_B = config['A_species'], config['B_species']
OUTPUT_DIR = '{}-{}'.format(SPECIES_A, SPECIES_B)
networks_dir_template = OUTPUT_DIR + '/{}-networks'
A_networks_dir = networks_dir_template.format(SPECIES_A)
B_networks_dir = networks_dir_template.format(SPECIES_B)

network_list_template = '{}/{}-networks.tsv'
A_network_list = network_list_template.format(A_networks_dir, SPECIES_A)
B_network_list = network_list_template.format(B_networks_dir, SPECIES_B)

network_template = '{out_dir}/{name}-networks/{name}-{i}.pkl'
log_template = '{out_dir}/log/{name}-networks/{name}-{i}.log'
results_template = '{out_dir}/{source_name}-to-{target_name}-permtest-results.json'
rule all:
    input:
        expand(results_template, \
               out_dir = OUTPUT_DIR, \
               source_name = SPECIES_A, \
               target_name = SPECIES_B)


rule permtest:
    input:
        source_random_network_data = \
            lambda w: \
                expand(network_template, \
                    out_dir=OUTPUT_DIR, \
                    name=w.source_name, \
                    i=range(3)),

        target_random_network_data = \
            lambda w: \
                expand(network_template, \
                    out_dir=OUTPUT_DIR, \
                    name=w.target_name, \
                    i=range(3)),

        source_ppi = lambda w: config['edgelists'][w.source_name],

        target_ppi = lambda w: config['edgelists'][w.target_name]
    output:
        results_template
    threads:
       config['threads']
    shell:
        '''
        python {PERMTEST} \
            -s {input.source_ppi}\
            -t {input.target_ppi}\
            -sf {input.source_random_network_data}\
            -tf {input.target_random_network_data}\
            -o TMP \
            -j {threads}
        '''

rule rand_networks:
    input:
        expand(network_template, \
                out_dir=OUTPUT_DIR, \
                name=[SPECIES_A, SPECIES_B], \
                i=range(config['n_permutations']))

rule rand_network:
    input:
        lambda w: config['edgelists'][w.name]
    output:
        network_template
    params:
        n_tries = config['n_tries']
    log:
        log_template
    shell:
        '''
        python {GEN_RANDOM_NETWORK} -e {input} -o {output} -nt {params.n_tries}
        '''
        
